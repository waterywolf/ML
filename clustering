!pip install scikit-fuzzy

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, DBSCAN
from sklearn.mixture import GaussianMixture
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import skfuzzy as fuzz

# Generate synthetic data
from sklearn.datasets import make_blobs
X, _ = make_blobs(n_samples=300, centers=4, cluster_std=1.0, random_state=42)

# Partitioning Clustering (K-Means)
def partitioning_clustering(X):
    kmeans = KMeans(n_clusters=4, random_state=42)
    kmeans.fit(X)
    labels = kmeans.labels_
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title('Partitioning Clustering (K-Means)')
    plt.show()

# Density-Based Clustering (DBSCAN)
def density_based_clustering(X):
    dbscan = DBSCAN(eps=0.5, min_samples=5)
    labels = dbscan.fit_predict(X)
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title('Density-Based Clustering (DBSCAN)')
    plt.show()

# Distribution Model-Based Clustering (Gaussian Mixture Model)
def distribution_model_based_clustering(X):
    gmm = GaussianMixture(n_components=4, random_state=42)
    gmm.fit(X)
    labels = gmm.predict(X)
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title('Distribution Model-Based Clustering (GMM)')
    plt.show()

# Hierarchical Clustering (Agglomerative)
def hierarchical_clustering(X):
    Z = linkage(X, method='ward')
    plt.figure(figsize=(10, 5))
    dendrogram(Z)
    plt.title('Hierarchical Clustering (Dendrogram)')
    plt.show()

    # Cut tree to form clusters
    labels = fcluster(Z, t=4, criterion='maxclust')
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title('Hierarchical Clustering (Agglomerative)')
    plt.show()

# Fuzzy Clustering (Fuzzy C-Means)
def fuzzy_clustering(X):
    # Transpose data for fuzzy C-means
    data = np.array(X).T

    # Fuzzy C-Means
    cntr, u, _, _, _, _, _ = fuzz.cluster.cmeans(data, c=4, m=2.0, error=0.005, maxiter=1000, init=None)

    # Assign labels
    labels = np.argmax(u, axis=0)
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title('Fuzzy Clustering (Fuzzy C-Means)')
    plt.show()

# Run each clustering algorithm
partitioning_clustering(X)
density_based_clustering(X)
distribution_model_based_clustering(X)
hierarchical_clustering(X)
fuzzy_clustering(X)



import pandas as pd

df = pd.DataFrame(X, columns=["Feature 1", "Feature 2"])

print(df.head())

print("\nDataset Summary:")
print(df.describe())

print("\nTotal Number of Data Points:", len(df))

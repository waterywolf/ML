import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import warnings
warnings.filterwarnings('ignore')

# Load and inspect data
data = pd.read_csv('temperatures.csv')
print("Data Information:")
data.info()
print("\nData Shape:", data.shape)

# Select monthly and seasonal temperature columns as features
# Adjust column names as per the dataset (e.g., 'JAN', 'FEB', 'MAR-MAY')
X = data[['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC', 
          'JAN-FEB', 'MAR-MAY', 'JUN-SEP', 'OCT-DEC']]

# Select the annual temperature as the target
y = data['ANNUAL']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on training and test sets
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Evaluate the model
mse_train = mean_squared_error(y_train, y_train_pred)
mae_train = mean_absolute_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)

mse_test = mean_squared_error(y_test, y_test_pred)
mae_test = mean_absolute_error(y_test, y_test_pred)
r2_test = r2_score(y_test, y_test_pred)

# Print evaluation metrics
print("Train Mean Squared Error (MSE):", mse_train)
print("Test Mean Squared Error (MSE):", mse_test)
print("Train Mean Absolute Error (MAE):", mae_train)
print("Test Mean Absolute Error (MAE):", mae_test)
print("Train R^2 Score:", r2_train)
print("Test R^2 Score:", r2_test)

# Plot predicted vs actual values for the test set
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_test_pred, color="blue", label="Predicted vs Actual")
plt.plot([y.min(), y.max()], [y.min(), y.max()], color="red", linestyle="--", label="Ideal Fit")
plt.xlabel("Actual Annual Temperature")
plt.ylabel("Predicted Annual Temperature")
plt.title("Predicted vs Actual Annual Temperature")
plt.legend()
plt.show()
